{
  "version": 3,
  "sources": ["../../../../app/routes/pipelines/$pipelineId.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, Outlet, useCatch, useLoaderData, useRevalidator } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\nimport * as React from \"react\";\n\nimport { ClientPipeline, unifyServer } from \"~/utils\";\nimport { deletePipeline, getPipeline } from \"~/models/pipeline.server\";\nimport { requireUserId } from \"~/session.server\";\nimport SmartTable from \"~/components/SmartTable\";\n\ntype Schema = {\n  schema: string,\n  tables: string[]\n}\n\nexport async function loader({ request, params }: LoaderArgs) {\n  const userId = await requireUserId(request);\n  invariant(params.pipelineId, \"pipelineId not found\");\n\n  const pipeline = await getPipeline({ userId, id: params.pipelineId });\n  if (!pipeline) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  let unifyConfigRes = await fetch(unifyServer() + \"/v1/dbconf\");\n  let unifyDbConfig = await unifyConfigRes.json();\n  console.log(unifyDbConfig);\n\n  let schemas: Schema[] = [];\n  try {\n    const api_res = await fetch(unifyServer() + \"/v1/schemas?deep=1\");\n    if (api_res.ok) {\n      schemas = await api_res.json();\n    } else {\n      throw Error(\"Unify fetch failed\");\n    }\n  } catch (error: any) {\n    console.log(error);\n    schemas = [{ \"schema\": error.message, \"tables\": [] }];\n  }\n  return json({ pipeline, schemas, unifyDbConfig });\n}\n\nexport async function action({ request, params }: ActionArgs) {\n  const userId = await requireUserId(request);\n  invariant(params.pipelineId, \"pipelineId not found\");\n\n  await deletePipeline({ userId, id: params.pipelineId });\n\n  return redirect(\"/pipelines\");\n}\n\nexport default function PipelineDetailsPage() {\n  let revalidator = useRevalidator();\n  const data = useLoaderData<typeof loader>();\n  let [rowData, setRowData] = React.useState<object[]>([]);\n  const pipeline = new ClientPipeline(\n    data.pipeline.id,\n    data.pipeline.name,\n    data.pipeline.tables,\n    [],\n    data.unifyDbConfig, undefined, 0);\n\n  let [columnDefs, setColumnDefs] = React.useState([\n    { field: \"id\" },\n    { field: \"node_id\" },\n    { field: \"name\" }\n  ]);\n\n  const reloadData = () => {\n    let url = pipeline.getServerUrl();\n    if (!url) return;\n\n    fetch(url, {\n      method: \"GET\",\n      headers: pipeline.getDbAuthHeaders()\n    }).then(response => response.json()).then(processResponse);\n\n    function processResponse(res: { data: object[], errors?: object }) {\n      let comparator = () => 0;\n      if (res.data.length > 0) {\n        let cols: { field: string, comparator: any }[] = [];\n        Object.keys(res.data[0]).map((col) => {\n          cols.push({ field: col, comparator });\n        });\n        setColumnDefs(cols);\n        setRowData(res.data);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    reloadData();\n  }, [pipeline.getServerUrl()]);\n\n  return (\n    <div className=\"flex flex-row h-full\">\n      <div className=\"pr-4\">\n        <h2 className=\"font-medium\">Datasets</h2>\n        <hr className=\"mt-1 mb-2\" />\n        {data.schemas.length === 0 ? (\n          <p className=\"p-2\">No schemas defined yet</p>\n        ) : (\n          <table className=\"table-auto\">\n            <tbody>\n            {data.schemas.map((schema: Schema) => (\n              schema.tables.map((table) => {\n                const qual = schema.schema + \".\" + table;\n                return (\n\n                  <tr key={qual} className=\"p-2 even:bg-slate-50\">\n                    <td className={\"pl-2 py-2\"}>{schema.schema}</td>\n                    <td className={\"px-2 py-2\"}><Link to={qual} className=\"text-blue-500\">{table}</Link></td>\n                  </tr>\n                );\n              })\n            ))}\n            </tbody>\n          </table>\n        )}\n\n      </div>\n      <div className=\"overflow-auto w-full\">\n        <div className=\"pb-3 -ml-2 -mt-2 flex flex-wrap items-baseline\">\n          <h3 className=\"ml-2 mt-2 text-lg font-medium leading-6 text-gray-900\">{data.pipeline.name}</h3>\n          <p className=\"ml-2 mt-1 truncate text-sm text-gray-500\">Tables: {data.pipeline.tables}</p>\n        </div>\n        <div className=\"w-auto h-[calc(100vh-260px)]\">\n          <SmartTable\n            entity={pipeline}\n            columnDefs={columnDefs}\n            rowData={rowData}\n            reloadData={reloadData}\n          />\n        </div>\n        <Form method=\"post\" className=\"my-4 text-right\">\n          <button\n            type=\"submit\"\n            className=\"rounded bg-red-600 text-sm py-2 px-4 text-white hover:bg-red-700 focus:bg-red-400\"\n          >\n            Delete\n          </button>\n        </Form>\n      </div>\n      <div>\n        <Outlet />\n      </div>\n    </div>\n  );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n\n  return <div>An unexpected error occurred: {error.message}</div>;\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n\n  if (caught.status === 404) {\n    return <div>Pipeline not found</div>;\n  }\n\n  throw new Error(`Unexpected caught response with status: ${caught.status}`);\n}\n\n/*\n\nUnfortunately this code does not work\n\n  // Create an AG data source to fetch data directly from CH\n  const createDatasource = function(pipeline: ClientPipeline) {\n    return {\n        // called by the grid when more rows are required\n        getRows: params => {\n            // get data for request from server\n            fetch(pipeline.getServerUrl())\n              .then(response => response.json())\n              .then(res => {\n                console.log(res);\n                if (res.data.length > 0) {\n                  let cols: {field: string}[] = [];\n                  Object.keys(res.data[0]).map((col) => {\n                    cols.push({field: col});\n                  });\n                  setColumnDefs(cols);     \n                }\n                params.successCallback({\n                  rowData: res.data\n                })\n              }).catch(err => {\n                console.log(err);\n                params.failCalback(err)\n              });\n        }\n    };\n  }\n*/"],
  "mappings": "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",
  "names": []
}
